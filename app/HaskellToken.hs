module HaskellToken where

import Lexer(Token(..))
import SrcLoc

import TokenInterface

-- data Token  -- imported from Lexer(Token(..))

--Todo: Version issues
--   (1)   ITdo _ vs ITdo
--   (2)   Support ITlolly or not

instance TokenInterface Token where
  fromToken (ITunderscore) = "_"
  fromToken (ITas) = "as"
  fromToken (ITcase) = "case"
  fromToken (ITclass) = "class"
  fromToken (ITdata) = "data"
  fromToken (ITdefault) = "default"
  fromToken (ITderiving) = "deriving"
  fromToken (ITelse) = "else"
  fromToken (IThiding) = "hiding"
  fromToken (ITif) = "if"
  fromToken (ITimport) = "import"
  fromToken (ITin) = "in"
  fromToken (ITinfix) = "infix"
  fromToken (ITinfixl) = "infixl"
  fromToken (ITinfixr) = "infixr"
  fromToken (ITinstance) = "instance"
  fromToken (ITlet) = "let"
  fromToken (ITmodule) = "module"
  fromToken (ITnewtype) = "newtype"
  fromToken (ITof) = "of"
  fromToken (ITqualified) = "qualified"
  fromToken (ITthen) = "then"
  fromToken (ITtype) = "type"
  fromToken (ITwhere) = "where"
  fromToken ((ITforall _)) = "forall"
  fromToken (ITforeign) = "foreign"
  fromToken (ITexport) = "export"
  fromToken (ITlabel) = "label"
  fromToken (ITdynamic) = "dynamic"
  fromToken (ITsafe) = "safe"
  fromToken (ITinterruptible) = "interruptible"
  fromToken (ITunsafe) = "unsafe"
  fromToken (ITfamily) = "family"
  fromToken (ITrole) = "role"
  fromToken (ITstdcallconv) = "stdcall"
  fromToken (ITccallconv) = "ccall"
  fromToken (ITcapiconv) = "capi"
  fromToken (ITprimcallconv) = "prim"
  fromToken (ITjavascriptcallconv) = "javascript"
  fromToken (ITproc) = "proc"
  fromToken (ITrec) = "rec"
  fromToken (ITgroup) = "group"
  fromToken (ITby) = "by"
  fromToken (ITusing) = "using"
  fromToken (ITpattern) = "pattern"
  fromToken (ITstatic) = "static"
  fromToken (ITstock) = "stock"
  fromToken (ITanyclass) = "anyclass"
  fromToken (ITvia) = "via"
  fromToken (ITunit) = "unit"
  fromToken (ITsignature) = "signature"
  fromToken (ITdependency) = "dependency"
  fromToken ((ITinline_prag _ _ _)) = "{-# INLINE"
  fromToken ((ITspec_prag _)) = "{-# SPECIALISE"
  fromToken ((ITspec_inline_prag _ _)) = "{-# SPECIALISE_INLINE"
  fromToken ((ITsource_prag _)) = "{-# SOURCE"
  fromToken ((ITrules_prag _)) = "{-# RULES"
  fromToken ((ITscc_prag _)) = "{-# SCC"
  fromToken ((ITdeprecated_prag _)) = "{-# DEPRECATED"
  fromToken ((ITwarning_prag _)) = "{-# WARNING"
  fromToken ((ITunpack_prag _)) = "{-# UNPACK"
  fromToken ((ITnounpack_prag _)) = "{-# NOUNPACK"
  fromToken ((ITann_prag _)) = "{-# ANN"
  fromToken ((ITminimal_prag _)) = "{-# MINIMAL"
  fromToken ((ITctype _)) = "{-# CTYPE"
  fromToken ((IToverlapping_prag _)) = "{-# OVERLAPPING"
  fromToken ((IToverlappable_prag _)) = "{-# OVERLAPPABLE"
  fromToken ((IToverlaps_prag _)) = "{-# OVERLAPS"
  fromToken ((ITincoherent_prag _)) = "{-# INCOHERENT"
  fromToken ((ITcomplete_prag _)) = "{-# COMPLETE"
  fromToken (ITclose_prag) = "#-}"
  fromToken (ITdotdot) = ".."
  fromToken (ITcolon) = ":"
  fromToken ((ITdcolon _)) = "::"
  fromToken (ITequal) = "="
  fromToken (ITlam) = "\\"
  fromToken (ITlcase) = "lcase"
  fromToken (ITvbar) = "|"
  fromToken ((ITlarrow _)) = "<-"
  fromToken ((ITrarrow _)) = "->"
--  fromToken (ITlolly) = "->."
  fromToken (ITat) = "TIGHT_INFIX_AT"
  fromToken ((ITdarrow _)) = "=>"
  fromToken (ITminus) = "-"
  fromToken (ITtilde) = "PREFIX_TILDE"
  fromToken (ITbang) = "PREFIX_BANG"
--  fromToken (ITprefixminus) = "PREFIX_MINUS"
  fromToken ((ITstar _)) = "*"
  fromToken ((ITlarrowtail _)) = "-<"
  fromToken ((ITrarrowtail _)) = ">-"
  fromToken ((ITLarrowtail _)) = "-<<"
  fromToken ((ITRarrowtail _)) = ">>-"
  fromToken (ITdot) = "."
--  fromToken ((ITproj True)) = "PREFIX_PROJ"
--  fromToken ((ITproj False)) = "TIGHT_INFIX_PROJ"
  fromToken (ITtypeApp) = "PREFIX_AT"
--  fromToken (ITpercent) = "PREFIX_PERCENT"
  fromToken (ITocurly) = "{"
  fromToken (ITccurly) = "}"
  fromToken (ITvocurly) = "vocurly"
  fromToken (ITvccurly) = "vccurly"
  fromToken (ITobrack) = "["
  fromToken (ITcbrack) = "]"
  fromToken (IToparen) = "("
  fromToken (ITcparen) = ")"
  fromToken (IToubxparen) = "(#"
  fromToken (ITcubxparen) = "#)"
  fromToken ((IToparenbar _)) = "(|"
  fromToken ((ITcparenbar _)) = "|)"
  fromToken (ITsemi) = ";"
  fromToken (ITcomma) = ","
  fromToken (ITbackquote) = "`"
  fromToken (ITsimpleQuote) = "SIMPLEQUOTE"
  fromToken ((ITvarid    _)) = "VARID"
  fromToken ((ITconid    _)) = "CONID"
  fromToken ((ITvarsym   _)) = "VARSYM"
  fromToken ((ITconsym   _)) = "CONSYM"
  fromToken ((ITqvarid   _)) = "QVARID"
  fromToken ((ITqconid   _)) = "QCONID"
  fromToken ((ITqvarsym  _)) = "QVARSYM"
  fromToken ((ITqconsym  _)) = "QCONSYM"
  fromToken ((ITdo)) = "DO"                      -- ITdo _
  fromToken ((ITmdo)) = "MDO"                  -- ITmdo _ 
  fromToken ((ITdupipvarid   _)) = "IPDUPVARID"
  fromToken ((ITlabelvarid   _)) = "LABELVARID"
  fromToken ((ITchar   _ _)) = "CHAR"
  fromToken ((ITstring _ _)) = "STRING"
  fromToken ((ITinteger _)) = "INTEGER"
  fromToken ((ITrational _)) = "RATIONAL"
  fromToken ((ITprimchar   _ _)) = "PRIMCHAR"
  fromToken ((ITprimstring _ _)) = "PRIMSTRING"
  fromToken ((ITprimint    _ _)) = "PRIMINTEGER"
  fromToken ((ITprimword   _ _)) = "PRIMWORD"
  fromToken ((ITprimfloat  _)) = "PRIMFLOAT"
  fromToken ((ITprimdouble _)) = "PRIMDOUBLE"
  fromToken ((ITopenExpQuote _ _)) = "[|"
  fromToken (ITopenPatQuote) = "[p|"
  fromToken (ITopenTypQuote) = "[t|"
  fromToken (ITopenDecQuote) = "[d|"
  fromToken ((ITcloseQuote _)) = "|]"
  fromToken ((ITopenTExpQuote _)) = "[||"
  fromToken (ITcloseTExpQuote) = "||]"
--  fromToken (ITdollar) = "PREFIX_DOLLAR"
--  fromToken (ITdollardollar) = "PREFIX_DOLLAR_DOLLAR"
  fromToken (ITtyQuote) = "TH_TY_QUOTE"
  fromToken ((ITquasiQuote _)) = "TH_QUASIQUOTE"
  fromToken ((ITqQuasiQuote _)) = "TH_QQUASIQUOTE"
  fromToken (ITeof) = "$"
  -- fromToken (???) = error
  
