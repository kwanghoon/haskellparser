module Main where

main = do
  putStr hello
  putStrLn world
  where
    hello = "Hello"

world = " World!!"


[Lexer only]

module at (1, 1): module
CONID at (1, 8): CONID
where at (1, 13): where
vocurly at (3, 1): vocurly <== 
VARID at (3, 1): VARID
= at (3, 6): =
DO at (3, 8): DO
vocurly at (4, 3): vocurly <==
VARID at (4, 3): VARID
VARID at (4, 10): VARID
; at (5, 3): ;             <==
VARID at (5, 3): VARID
VARID at (5, 12): VARID
; at (6, 3): ;             <==
where at (6, 3): where
vocurly at (7, 5): vocurly <==
VARID at (7, 5): VARID
= at (7, 11): =
STRING at (7, 13): STRING
vccurly at (9, 1): vccurly <==
vccurly at (9, 1): vccurly <==
; at (9, 1): ;             <==
VARID at (9, 1): VARID
= at (9, 7): =
STRING at (9, 9): STRING
; at (12, 1): ;            <==
%eof at (12, 1): %eof


[Initial program]

module Main where

{main = do
  {putStr hello
    ;putStrLn world
  ;where
    {hello = "Hello"

}}world = " World!!"
;


[Parser]

module at (1, 1): module
CONID at (1, 8): CONID
where at (1, 13): where
vocurly at (3, 1): vocurly    
VARID at (3, 1): VARID
= at (3, 6): =
DO at (3, 8): DO
vocurly at (4, 3): vocurly
VARID at (4, 3): VARID
VARID at (4, 10): VARID
; at (5, 3): ;
VARID at (5, 3): VARID
VARID at (5, 12): VARID
; at (6, 3): ;
lookActionTable failed (1st) with: "where at (6, 3): where"
lookActionTable succeeded (2nd) with: vccurly at (6, 3): vccurly   <== 
vccurly at (6, 3): vccurly
where at (6, 3): where
vocurly at (7, 5): vocurly
VARID at (7, 5): VARID
= at (7, 11): =
STRING at (7, 13): STRING
vccurly at (9, 1): vccurly
vccurly at (9, 1): vccurly     =====> Generated too hastily !! Should be done after ";"!
lookActionTable failed (1st) with: "; at (9, 1): ;"
lookActionTable failed (2nd) with: vccurly at (9, 1): vccurly     <==
lexer-exe: NotFoundAction: 1091 ; at (9, 1): ;

module Main where

{main = do
  {putStr hello
  ;putStrLn world
  ;}where
    {hello = "Hello"

}}world = " World!!"
;




[Note]

module Main where

{main = do
  {putStr hello
  ;putStrLn world
  ;}where
    {hello = "Hello"

}

상태가 되었을 때 뒤에 어떤 내용이 나오느냐에 따라 다음 토큰이
결정된다.

 i) 아무 내용이 없다면: }

    - lexer가 EOF를 parser에 주면
    - parser는 action not found로 파스 에러를 낸다.
    - lexer가 }를 추가하고 다시 parser를 호출

 ii) main = do ... 와 같은 수준의 world = " World!!" 바인딩이라면: ;

    - lexer가 world를 identifier 토큰을 parser에게 주면
    - parser는 action not found로 파스 에러를 낸다. 
    - lexer는 이 identifier 토큰 앞에 ;를 추가하고 다시 parser를 호출


ToDo

 - Parser driven token generator 방식을 구현

 - Shift에서 action not found error가 발생하면 }를 추가!
   Reduce에서 발생한 parse error는 추가 조처 없음 

   	      
=====

Error recovery (Parser.hs compiled from Parser.y)

-----------------------------------------------------------------------------
-- Error recovery (ERROR_TOK is the error token)

-- parse error if we are in recovery and we fail again
happyFail explist 0# tk old_st _ stk@(x `HappyStk` _) =
     let i = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
--      trace "failing" $ 
        happyError_ explist i tk

{-  We don't need state discarding for our restricted implementation of
    "error".  In fact, it can cause some bogus parses, so I've disabled it
    for now --SDM

-- discard a state
happyFail  ERROR_TOK tk old_st CONS(HAPPYSTATE(action),sts) 
                                                (saved_tok `HappyStk` _ `HappyStk` stk) =
--      trace ("discarding state, depth " ++ show (length stk))  $
        DO_ACTION(action,ERROR_TOK,tk,sts,(saved_tok`HappyStk`stk))
-}

-- Enter error recovery: generate an error token,
--                       save the old token and carry on.
happyFail explist i tk (action) sts stk =
--      trace "entering error recovery" $
        happyDoAction 0# tk action sts ((Happy_GHC_Exts.unsafeCoerce# (Happy_GHC_Exts.I# (i))) `HappyStk` stk


=====

happyDoAction :: () => Happy_GHC_Exts.Int# -> (Located Token) -> Happy_GHC_Exts.Int# -> Happy_IntList -> HappyStk (HappyAbsSyn ) -> P (HappyAbsSyn )

happyDoAction i tk st
        = {- nothing -}
          case action of
                0#           -> {- nothing -}
                                     happyFail (happyExpListPerState ((Happy_GHC_Exts.I# (st)) :: Int)) i tk st
                -1#          -> {- nothing -}
                                     happyAccept i tk st
                n | LT(n,(0# :: Happy_GHC_Exts.Int#)) -> {- nothing -}
                                                   (happyReduceArr Happy_Data_Array.! rule) i tk st
                                                   where rule = (Happy_GHC_Exts.I# ((Happy_GHC_Exts.negateInt# ((n Happy_GHC_Exts.+# (1# :: Happy_GHC_Exts.Int#))))))
                n                 -> {- nothing -}
                                     happyShift new_state i tk st
                                     where new_state = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
   where off    = happyAdjustOffset (indexShortOffAddr happyActOffsets st)
         off_i  = (off Happy_GHC_Exts.+# i)
         check  = if GTE(off_i,(0# :: Happy_GHC_Exts.Int#))
                  then EQ(indexShortOffAddr happyCheck off_i, i)
                  else False
         action
          | check     = indexShortOffAddr happyTable off_i
          | otherwise = indexShortOffAddr happyDefActions st


=====

(Group1)

L (<n>: ts) (m : ms) 
  = ; : (L ts (m : ms))  if m = n
  = } : (L (< n >: ts) ms) if n < m


(Group2)

L (<n>: ts) ms = L ts ms


(Group3)

L ({n} : ts) (m : ms) = { : (L ts (n : m : ms))  if n > m 
L ({n} : ts) []       = { : (L ts [n])           if n > 0
L ({n} : ts) ms       = { : } : (L (<n>: ts) ms)


(Group4)

L (} : ts) (0 : ms) = } : (L ts ms)
L (} : ts) ms       = parse-error
L ({ : ts) ms       = { : (L ts (0 : ms))


(Group5)

L (t : ts) (m : ms) = } : (L (t : ts) ms)  if m/ = 0 and parse-error(t)


(Group6)

L (t : ts) ms = t : (L ts ms)


(Group7)

L [ ] [] = []
L [ ] (m : ms) = } : L [ ] ms if m /= 0

L (t : ts) (m : ms) = } : (L (t : ts) ms)  if m /= 0 and parse-error(t)

